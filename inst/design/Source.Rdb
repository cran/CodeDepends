<?xml version="1.0"?>
<article xmlns:r="http://www.r-project.org"
         xmlns:xi="http://www.w3.org/2003/XInclude">

<articleinfo>

<title></title>

<author><firstname>Duncan</firstname><surname>Temple Lang</surname>
  <affiliation><orgname>University of California at Davis</orgname>
               <orgdiv>Department of Statistics</orgdiv>
  </affiliation>
</author>
</articleinfo>

<section>
<title></title>

<para>
We can use the <omg:pkg>CodeDepends</omg:pkg> package
to source parts of a document.
This can be useful when debugging code.
Suppose we have a script that is made up of various separate tasks.
We don't necessarily want run each line of code or source the entire script.
Instead,  we might know which variable we want to create.
<r:code>
sc = readScript("file.R")
sourceVariable("enums", sc)
</r:code>

</para>
<para>
See tu1.R in RCUDA/TU/ for an example
</para>


<para>
This is more convenient and robust than
cutting and pasting from a file or 
adding <r:expr>if(FALSE)</r:expr> conditions to stop
code being evaluated.
If we are debugging, cutting and pasting can cause
commands to be interpreted by the error handling or debug functions
(because we cut and pasted many lines  some of which are used as commands
at the debug prompt).
Adding <r:expr>if(FALSE)</r:expr> to the script means that it no longer
runs as one single unit.
</para>
<para>
Another approach we use is to have the document
in XML. Then we can use <r:expr>xmlSource</r:expr>
to evaluate specific chunks. This could be done for Sweave and knitr
also. We can use identifiers/labels for the code chunks.
However, it is still better to do this semantically based on the content of the code.


</para>
<para>
In addition to being able to compute only up to a particular point
and ony the relevant subset of expressions,
we also want to be able to modify a particular variable and propagate
the changes in its value to update any of the other variables.
We can use <r:func>getPropagateChanges</r:func> to do this.
We specify the names of the variables that were changed and the script object.
This the determines which expressions are directly affected, i.e. have 
any of those variables as inputs.  This can also be done recursively 
so that we get all the expressions that would be updated.
</para>

<para>
We can use this package to help understand a script,
when we can remove variables as they are no longer needed/used
(see <r:func>findWhenUnneeded</r:func>, <r:func>getDetailedTimelines</r:func>),
identifying clusters of related expressions.
</para>


</section>
</article>